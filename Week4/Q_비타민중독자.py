# [DFS] 비타민 중독자

# 건강을 위해 비타민을 잘 챙겨 먹는 도도새는 비타민 Z가 몸에 좋다고 하여 구매하려고 합니다. 비타민 Z는 비타민 Z-1부터 비타민 Z-N까지 N 가지 종류가 있다고 합니다.
# 일부 비타민 Z는 함께 섭취하게 되면 오히려 안 좋은 물질이 생성되어 오히려 역효과가 발생한다고 합니다. 따라서 도도새는 이러한 경우를 피하면서 3가지 비타민 Z를 선택하여 구매하려고 합니다.
# 도도새가 3가지의 비타민 Z를 선택하는 방법이 몇 가지인지 구하는 프로그램을 작성하세요.

# [입력]
# 첫째 줄에 정수 N과 M을 입력합니다. N은 비타민 Z 종류의 수이고, M은 함께 먹으면 안 되는 비타 조합의 개수입니다.
# (3 ≤ N ≤ 100)
# 다음 M개의 줄에는 함께 먹으면 안 되는 조합의 번호를 입력합니다. 같은 조합은 두 번 이상 나오지 않습니다.
# (0 ≤ M ≤ 800)
# M의 크기는 N개의 비타민 Z에서 2가지를 고르는 방법의 가짓수보다 작거나 같습니다.
# [출력]
# 3가지 비타민 Z를 구매하는 방법의 가짓수를 출력합니다.

# [입력 예시]
# 5 3
# 1 2
# 3 4
# 1 3
# [출력 예시]
# 3
# 예제는 비타민Z의 종류가 5가지이며 함께 먹으면 안 되는 3가지 조합이 있는 경우입니다.
# 1번은 2번, 3번과 같이 먹으면 안되고, 3번은 4번과 함께 먹으면 안 됩니다. 따라서 (1 4 5), (2 3 5), (2 4 5)와 같이 3가지 방법이 있습니다.

def solution():
    n, m = map(int,input().split())
    graph = [[0]*n for _ in range(n)]
    no = []
    for _ in range(m):
        i,j = map(int,input().split())
        graph[i-1][j-1] = 1
        graph[j-1][i-1] = 1
        no.append([i-1,j-1])
        no.append([j-1,i-1])

    permutations = []
    for i in  range(n):
        for j in range(n):
            if (i != j) and (not [i,j] in no):
                for k in range(n):
                    if k != i and k != j:
                        if graph[i][j] != 1 and graph[j][i] != 1 and graph[i][k] != 1 and graph[k][i] != 1 and graph[j][k] != 1 and graph[k][j] != 1:
                            lst = [i,j,k]
                            lst.sort()
                            if not lst in permutations:
                                permutations.append([i,j,k])
                            
    print(len(permutations))


if __name__ == '__main__':
    solution()


# # 아이디어
# - DFS문제라곤 나와있는데, DFS개념 쓴게 없다(주륵..발상이 안떠오른다)
# - 기껏 생각해낸게, 주어진 금지된 조합이 있는 경우를 제외한, 3개의 조합을 전부 구해서, 리스트에 넣고
# - 그 리스트안에서, 순서만 다르지, 중복된 조합이 있을꺼니깐, 먼저, 각 리스트조합마다, 오름차순으로 정렬하고,
# - 그 정렬한 전체 리스트를, 기존에 들어가있는, 리스트들 안에 없으면, 새로 추가하는 식으로 했다.
# - 마지막에 전체리스트의 길이를 출력했다.

# # 결과
# 80

# # 질문거리
# - 일단, 이 생각을 하고, 들어가기 전부터, 왠지 시간초과 발생할 것 같단 생각하긴 했다...(주륵)
# - 조금이라도, 반복문 연산갯수를 줄여보려고, 잔머리를 굴려봤지만, 변화는 없었다 ㅠㅠ
