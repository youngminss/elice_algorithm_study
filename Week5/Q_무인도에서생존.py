# [DP] 무인도에서의 생존

# 모자 장수는 하트 여왕의 미움을 사서 무인도로 쫓겨나게 되었습니다. 하트 여왕은 마지막 자비로 모자 장수의 모자에 담을 수 있을 만큼만 필요한 물건을 가져가도록 허락하였습니다.
# 모자 장수가 무인도에서 생존하기 위해 필요한 N개의 물건이 있습니다. 각 물건은 무게 W와 가치 V를 가지고 있습니다. 하지만 모자 장수의 모자에는 최대 K의 무게만큼만 물건을 담을 수 있습니다.
# 모자 장수가 최대한 높은 가치의 물건을 챙길 수 있도록 도와주는 프로그램을 작성하세요.

# [입력]
# 첫 줄에 가져갈 수 있는 물건의 수 N과 모자에 담을 수 있는 최대 무게 K를 입력합니다.
# (1 <= N <= 100)
# (1 <= K <= 10,000)
# 두 번째 줄부터 N개의 줄에 거쳐 각 물건의 무게 W와 해당 물건의 가치 V를 입력합니다.
# (1 <= W <= 10,000)
# (0 <= V <= 10,000)
# 입력으로 주어지는 모든 수는 정수입니다.
# [출력]
# 모자에 담을 수 있는 물건들의 가치 합의 최댓값을 출력합니다.

# [입력 예시]
# 4 7
# 6 13
# 4 8
# 3 6
# 5 12
# [출력 예시]
# 14

def knap_01_DP():
    n, k = map(int,input().split())
    list_w = []
    list_v = []
    for _ in range(n):
        w,v = map(int,input().split())
        list_w.append(w)
        list_v.append(v)
    dp = [[0]*(k+1) for _ in range(n+1)]

    max_sum = 0
    for i in range(1,n+1):
        for j in range(1,k+1):
            if list_w[i-1] <= j :
                dp[i][j] = max(list_v[i-1] + dp[i-1][j - list_w[i-1]], dp[i-1][j])
            else:
                dp[i][j] = dp[i-1][j]
            max_sum = max(dp[i][j],max_sum)
    print(max_sum) 

if __name__ == '__main__':
    knap_01_DP()


# # 아이디어
# - 문제를 읽고서, DP문제중에, "0-1 배낭문제"인 것은 알았다.
# - 실질적으로, 구현을 해보지는 않아서, 이해가 잘 안갔다.

# # 피드백
# - 구글링해서, 관련된 문제를 보다가, 문제내용만 다르지, 완전히 똑같은 문제해설이 있어서, 보고 이해해봤다.
# https://dheldh77.tistory.com/entry/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B0%B0%EB%82%AD-%EB%AC%B8%EC%A0%9CKnapsack-Problem