# [스택] 해치웠나…
# 정의의 용사가 나쁜 악당과 싸우고 있습니다. 나쁜 악당은 하나라도 터지면 우주가 멸망해버리는 폭탄 ‘(‘ 를 발사하였습니다. 이 폭탄을 막을 방법은 폭탄과 정확하게 같은 개수만큼 용사 레이저 ‘)’ 를 발사하는 것뿐입니다. 용사 레이저도 너무 강력하여 폭탄보다 먼저 발사되거나 많이 발사해버리면 폭발하여 우주가 멸망합니다.
# 예를 들어, “(())()()” 의 경우 폭탄과 레이저의 개수가 일치하여 방어에 성공했지만, “((()((())” 또는 “)))(())” 의 경우에는 폭탄이 레이저보다 많거나 레이저가 폭탄보다 많아 폭발하여 우주가 멸망하게 됩니다. “)(“ 의 경우에는 개수는 일치하지만 폭탄보다 레이저가 먼저 발사되어 우주가 멸망하게 됩니다.
# 용사와 악당의 결투를 문자열로 받아 방어에 성공했는지 판별해보는 프로그램을 작성하세요.

# [입력]
# 용사와 악당의 결투 내용을 나타내는 괄호 문자열을 한 줄에 입력합니다.
# 하나의 괄호 문자열의 길이는 2 이상 50 이하의 정수입니다.
# [출력]
# 방어에 성공했으면 “YES”, 아니면 “NO”를 출력합니다.

# [입력 예시]
# (())())  --- case.1
# (())()() --- case.2
# ((()((()) --- case.3
# )))(())  --- case.4
# [출력 예시]
# NO   --- case.1
# YES  --- case.2
# NO  --- case.3
# NO  --- case.4

#[Code]
def solution():
    stack = []
    datas = input()
    check = 0

    for x in datas:
        if x == '(':
            stack.append('(')
        else:
            if len(stack) == 0:
                check = 1
                break
            else:
                stack.pop()
    if check != 1 and len(stack) == 0:
        print("YES")
    else:
        print("NO")

if __name__ == '__main__':
    solution()


# 아이디어
# 전형적인 스택문제,몇번 접해봐서, 문제를 읽으면서, "스택" 문제구나 생각할수 있었다.
# 답이 될 수 있는 경우(성공) => 'YES' 는 결국,

# - '(' 가 나온 후에 ')'가 항상 짝이 되어야하고
# - 한줄에 들어오는 문자열 정보를 끝까지 탐색했을때, 스택은 비어있어야, 끝까지 탐색을 완료했음을 의미
# 그 외에 경우에는 우주멸망(실패) => 'NO' 출력

# - ')'이 '('보다 먼저 나온다거나
# - 문자열정보를 전부 탐색하지 않았는데, 끝나려고 한다거나
# - 아직 스택에 사용하지않은 '(' 가 있는 경우
