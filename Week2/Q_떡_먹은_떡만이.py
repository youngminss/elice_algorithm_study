# [시뮬레이션] 떡 먹은 떡만이

# 똑같이 생긴 세쌍둥이 떡만이 1, 떡만이 2, 떡만이 3이 일렬로 서있습니다. 세 떡만이가 처음에 서 있던 자리를 왼쪽부터 1번, 2번, 3번 자리라고 합니다.
# 떡만이 1은 하나밖에 없는 떡을 한입에 먹어버렸습니다. 그리고 세 떡만이들은 누가 떡을 먹었는지 숨기기 위해 서로 자리를 바꾸려고 합니다.
# 떡만이들은 두 자리를 고른 다음 두 자리에 있는 떡만이들이 자리를 바꾸려고 합니다. 예를 들어, 1번 자리와 3번 자리를 골랐다면 1번 자리에 있는 떡만이가 3번 자리에, 3번 자리에 있던 떡만이가 1번 자리로 이동하게 됩니다.
# 떡만이들이 자리를 M 번 바꾼다고 할 때, 떡 먹은 떡만이를 찾는 프로그램을 작성하세요.

# [입력]
# 첫째 줄에 위치를 바꾼 횟수를 나타내는 자연수 M을 입력합니다.
# (1<= M<= 100)
# 둘째 줄부터 M개의 줄에는 위치를 바꾼 자리 X와 Y를 공백으로 구분하여 입력합니다.
# X와 Y는 1, 2, 3만 입력 가능합니다.
# X와 Y의 값은 3보다 작거나 같고, X와 Y가 같을 수도 있습니다.

# [출력]
# 떡을 먹은 용만이가 위치한 곳의 자리 번호를 출력합니다.

# [입력 예시]
# 4
# 3 1
# 2 3
# 3 1
# 3 2
# [출력 예시]
# 3

def solution():
    m = int(input())

    data = [1,0,0]
    for _ in range(m):
        standard_1, standard_2 = map(int,input().split())
        tmp = data[standard_1 - 1]
        data[standard_1 - 1] = data[standard_2 - 1]
        data[standard_2 - 1] = tmp

    print(data.index(1) + 1) 

if __name__ == '__main__':
    solution()


# 아이디어
# - 결과적으로, 시작이 1번 떡만이가 떡을 먹고 시작함에 의미로 크기 3의 [1,0,0] 리스트를 만들고 시작, m 번에 자리 교환 정보가 들어오면, swap 한다.
# - 마지막에 1 이 있는 index를 index() 메소드를 이용해서 뽑아낸다.

# # 결과 [100]

# # 질문거리
# - "시뮬레이션"이란 테마의 알고리즘 문제 정의를 정확히 알고 가야겠다.
# - swap 만 생각해냈으면, 최선의 선택인지 알고 싶다. 
     