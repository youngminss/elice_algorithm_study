# [수학] 피보나치 K번째 수는?

# 피보나치 수는 첫째 및 둘째 항이 1이며 그 뒤의 모든 항은 바로 앞 두 항의 합인 수열입니다.
# 피보나치 수를 조금 써보면, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, … 와 같습니다. 이때 피보나치 수열의 K 번째 요소를 출력하는 프로그램을 작성하세요.

# [입력]
# 첫 번째 줄에 자연수 K를 입력합니다.
# (1≤K≤5,000)
# [출력]
# 첫 번째 줄에 피보나치 수열의 K 번째 요소를 출력합니다.

# [입력 예시]
# 4
# [출력 예시]
# 3

fibo = [0,1]
n = int(input())
for i in range(2,n+1):
    fibo.append(fibo[i-1] + fibo[i-2])
print(fibo[n])


# # 아이디어
# - 피보나치는 워낙 유명한 조건이 있다.
# if n < 2:
#     return n
# else:
#     return fibo(n-1) + fibo(n-2) 
# 이걸 재귀함수로 n 번째 피보나치 수를 리턴하는 식으로 해도 되지만, 실행시간적인 면에서, "동적계획법"을 이용하면, 더 효율적이다.

# # 결과 [100]

# # 질문거리
# - 피보나치 수 구하기는 대학교에서도 그렇고, 워낙 유명한 기초예제로 쓰이니 알고 있었는데
# - "동적계획법" 이란, 방식을, 어떤 문제를 봤을때, 어떻게 캐치해내고, 내가 세운 코드가 동적계획을 쓴건지..알 수 있는 기준을 알고 싶다. 
# - (정확히는 알고리즘 설계하기전에 어떤 기준을 두고 세워야하는지 감이 잘 안온다.)
